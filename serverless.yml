service: course-project-06
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iam:
      role:
          statements:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - arn:aws:dynamodb:us-east-1:158626108575:table/ProductTable  
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
              Resource: "*"

functions:
  api:
    handler: src/index.handler
    events:
      - httpApi:
          path: /
          method: get
  loginUser:
    handler: src/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true
  signupUser:
    handler: src/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true
  newItem:
    handler: src/newItem.handler
    events:
      - http:
          path: /item
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  updateItem:
    handler: src/updateItem.handler
    events:
      - http:
          path: /items/{id}
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  loadItem:
    handler: src/loadItem.handler
    events:
      - http:
          path: /items/{id}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  loadItems:
    handler: src/loadItems.handler
    events:
      - http:
          path: /items
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: ProductTable
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          GlobalSecondaryIndexes:
            - IndexName: pk-table-items
              KeySchema:
                - AttributeName: id
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
          UserPoolName: serverless-auth-pool
          Schema:
            - Name: email
              Required: true
              Mutable: true
          Policies:
            PasswordPolicy:
              MinimumLength: 6
          AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: user-pool-ui
          GenerateSecret: false
          UserPoolId: { Ref: UserPool }
          AccessTokenValidity: 5
          IdTokenValidity: 5
          ExplicitAuthFlows:
            - "ADMIN_NO_SRP_AUTH"
